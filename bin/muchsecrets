#!/usr/bin/env ruby
require 'optparse'
require 'muchsecrets'

options = {}

# Extra options to OptionParser reduce the amount of whitespace it introduces
# into the help message, making it easier to make the help message fit in a
# 80x24 window.
opts = OptionParser.new(nil, 24, '  ')

opts.banner = 'Usage: muchsecrets [options] [--file /path/to/file | --consul path/to/consul/key | --string "really private string"]'

# actions
opts.on('--encrypt', 'Encrypt it.') do |opt|
  options[:encrypt] = opt
end
opts.on('--decrypt', 'Decrypt it.') do |opt|
  options[:decrypt] = opt
end

# options
opts.on('--consulserver HOST', 'Consul server http address.') do |opt|
  options[:consulserver] = opt
end
opts.on('--privatekey PRIVKEY', 'Location of your private key.') do |opt|
  options[:privatekey] = opt
end
opts.on('--publickey PUBKEY', 'Location of your public key.') do |opt|
  options[:publickey] = opt
end

# what to act on
opts.on('--file FILE', 'File to encrypt.') do |opt|
  options[:file] = opt
end
opts.on('--consul KEY', 'Consul key to decrypt.') do |opt|
  options[:consul] = opt
end
opts.on('--string "STRING"', 'Quoted string to encrypt.') do |opt|
  options[:string] = opt
end

opts.on_tail('-h', '--help', 'Show this message.') do
  puts opts
  exit
end

opts.parse!

# Display a usage message if the user did not specify a valid action to perform.
if options.empty?
  puts opts
  exit
end

# I refuse to encrypt and decrypt at the same time.
if options[:encrypt] && options[:decrypt]
  puts "you cannot pass the --encrypt flag at the same time as the --decrypt flag."
  exit
# likewise, I refuse to do nothing.
elsif !options[:encrypt] && !options[:decrypt]
  puts "you need to pass either --encrypt or --decrypt."
  exit
end

# if we get here I guess we can do something.
if options[:encrypt]
  # need the public key for encrypting.
  abort "--encrypt needs the --publickey option passed." if !options[:publickey]

  string_to_encrypt = ""

  if options[:file]
    string_to_encrypt = File.read(options[:file])
  elsif options[:string]
    string_to_encrypt = options[:string].to_s
  end

  # encrypt and print string
  wow = MuchSecrets::Secret.new(:public_key => options[:publickey])
  puts wow.encrypt_string(string_to_encrypt)

elsif options[:decrypt]
  # need the public and private keys for decrypting.
  abort "--decrypt needs the --publickey option passed." if !options[:publickey]
  abort "--decrypt needs the --privatekey options passed." if !options[:privatekey]

  wow = MuchSecrets::Secret.new(:public_key => options[:publickey], :private_key => options[:privatekey])
  puts wow.get_consul_secret(options[:consul])

end


